// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PolicyHolder {
  policy_holder_id       String     @id @default(cuid())
  policy_holder_email     String     @unique
  policy_holder_first_name String
  policy_holder_last_name  String
  policies               PolicyAssignment[]  // Relationship field
}

model InsurancePolicy {
  insurance_policy_id     String     @id @default(cuid())
  insurance_policy_name   String
  base_price_sgd          Decimal    @db.Decimal(10, 2)
  type_of_policy          String
  assignments             PolicyAssignment[]  // Relationship field
}

model PolicyAssignment {
  policy_holder_id        String     // Foreign key
  insurance_policy_id     String     // Foreign key
  policy_holder           PolicyHolder  @relation(fields: [policy_holder_id], references: [policy_holder_id], onDelete: Cascade)
  insurance_policy        InsurancePolicy @relation(fields: [insurance_policy_id], references: [insurance_policy_id], onDelete: Cascade)

  @@id([policy_holder_id, insurance_policy_id])  // Composite primary key using distinct fields
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}